import json
import logging
import requests
import asyncio
from datetime import datetime, timedelta
from difflib import SequenceMatcher
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª—é—á–∏ –¥–ª—è API Wildberries –∏ Telegram
WB_API_KEY = "eyJhbGciOiJFUzI1NiIsImtpZCI6IjIwMjQxMTE4djEiLCJ0eXAiOiJKV1QifQ.eyJlbnQiOjEsImV4cCI6MTc0NzczMTIwMywiaWQiOiIwMTkzNDEwZC0zMTlkLTdjNDctYWJjYS05MDQyMTlmMTdmZmEiLCJpaWQiOjU4NjU2MzkzLCJvaWQiOjQyNTU1NzcsInMiOjEwNzM3NDI4NDgsInNpZCI6IjFmNTRhOGY5LWRlNTEtNDg5ZC04MWZiLWZlOTAwNDlkZmRmMSIsInQiOmZhbHNlLCJ1aWQiOjU4NjU2MzkzfQ.wQqeHP6gHpJz1Ytj4mh-EV3V8dEqnPmH0XZNOlmtJsO4L0dGPfPOeLsqUTv5qcIpRaBIgOQIhWciyLwsTys2Ow"
TELEGRAM_BOT_TOKEN = "8028999606:AAFYdlfmELLfQ388Y19ktkTrmUEfw-9XQAI"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
monitored_warehouses = set()
selected_types = set()
monitoring_interval = 7  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤ –¥–Ω—è—Ö)
max_coefficient = 18  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
is_monitoring = False
previous_data = {}  # –•—Ä–∞–Ω–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
acceptance_type_emojis = {
    "–ö–æ—Ä–æ–±–∞": "üì¶",
    "QR-–ø–æ—Å—Ç–∞–≤–∫–∞": "üè∑Ô∏è",
    "–ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã": "üõ†Ô∏è",
    "–°—É–ø–µ—Ä—Å–µ–π—Ñ": "üîí"
}


# –¢–∏–ø—ã –ø—Ä–∏–µ–º–∫–∏
acceptance_types = ["–ö–æ—Ä–æ–±–∞", "QR-–ø–æ—Å—Ç–∞–≤–∫–∞", "–ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã", "–°—É–ø–µ—Ä—Å–µ–π—Ñ"]

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_warehouses():
    try:
        with open("warehouses.json", "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        logger.error("–§–∞–π–ª warehouses.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ warehouses.json.")
        return []

all_warehouses = load_warehouses()

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.")
    keyboard = [
        [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", callback_data="monitoring_settings")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã.", reply_markup=reply_markup)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Wildberries
async def fetch_acceptance_coefficients():
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö –∏–∑ Wildberries API.")
    headers = {"Authorization": WB_API_KEY}
    try:
        response = requests.get("https://supplies-api.wildberries.ru/api/v1/acceptance/coefficients", headers=headers)
        response.raise_for_status()
        data = response.json()
        logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã: {len(data)} –∑–∞–ø–∏—Å–µ–π.")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        for item in data[:10]:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
            logger.debug(f"–ó–∞–ø–∏—Å—å: {item}")
            
        return data
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Wildberries API: {e}")
        return []


def is_similar(warehouse_api_name, warehouse_monitor_name, threshold=0.7):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—Ö–æ–∂–∏ –ª–∏ –¥–≤–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è SequenceMatcher.
    :param warehouse_api_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –∏–∑ API.
    :param warehouse_monitor_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.
    :param threshold: –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ (–æ—Ç 0 –¥–æ 1).
    :return: True, –µ—Å–ª–∏ —Å—Ö–æ–∂–µ—Å—Ç—å –≤—ã—à–µ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.
    """
    similarity = SequenceMatcher(None, warehouse_api_name.lower(), warehouse_monitor_name.lower()).ratio()
    return similarity >= threshold


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async def monitoring_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
    keyboard = [
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç", callback_data="set_interval")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", callback_data="set_coefficient")],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Å–∫–ª–∞–¥—ã", callback_data="set_warehouses")],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –ø—Ä–∏–µ–º–∫–∏", callback_data="set_acceptance_types")],
        [InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="start_monitoring")],
        [InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="stop_monitoring")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    monitoring_message = (
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {monitoring_interval} –¥–Ω–µ–π\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {max_coefficient}\n"
        f"–°–∫–ª–∞–¥—ã: {', '.join(monitored_warehouses) if monitored_warehouses else '–í—Å–µ'}\n"
        f"–¢–∏–ø—ã –ø—Ä–∏–µ–º–∫–∏: {', '.join(selected_types) if selected_types else '–í—Å–µ'}"
    )
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(monitoring_message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(monitoring_message, reply_markup=reply_markup)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async def set_interval(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("24—á", callback_data="interval_1"), InlineKeyboardButton("2–¥", callback_data="interval_2")],
        [InlineKeyboardButton("3–¥", callback_data="interval_3"), InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="interval_7")],
        [InlineKeyboardButton("2 –Ω–µ–¥–µ–ª–∏", callback_data="interval_14")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", reply_markup=reply_markup)

async def set_monitoring_interval(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global monitoring_interval
    query = update.callback_query
    await query.answer()
    monitoring_interval = int(query.data.split("_")[1])
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {monitoring_interval} –¥–Ω–µ–π.")
    await monitoring_settings(update, context)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –ø—Ä–∏–µ–º–∫–∏
async def select_acceptance_types(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –≤—ã–±–æ—Ä —Ç–∏–ø–æ–≤ –ø—Ä–∏–µ–º–∫–∏.")
    query = update.callback_query
    await query.answer()

    # –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –ø—Ä–∏–µ–º–∫–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton(f"{acceptance} {'‚úÖ' if acceptance in selected_types else '‚ùå'}", callback_data=f"toggle_type_{acceptance}")]
        for acceptance in acceptance_types
    ]
    keyboard.append([InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="finish_acceptance_types")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –ø—Ä–∏–µ–º–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", reply_markup=reply_markup)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∫–∏
async def toggle_acceptance_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    type_name = query.data.split("_")[2]
    if type_name in selected_types:
        selected_types.remove(type_name)
        logger.info(f"–¢–∏–ø –ø—Ä–∏–µ–º–∫–∏ '{type_name}' —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
    else:
        selected_types.add(type_name)
        logger.info(f"–¢–∏–ø –ø—Ä–∏–µ–º–∫–∏ '{type_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")

    await select_acceptance_types(update, context)

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –ø—Ä–∏–µ–º–∫–∏
async def finish_acceptance_types(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–±–æ—Ä —Ç–∏–ø–æ–≤ –ø—Ä–∏–µ–º–∫–∏.")
    query = update.callback_query
    await query.answer()
    await monitoring_settings(update, context)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
warehouses = load_warehouses()  # –í—Å–µ —Å–∫–ª–∞–¥—ã –∏–∑ —Ñ–∞–π–ª–∞
per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

# –†–∞–∑–¥–µ–ª–∏–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
def paginate_warehouses(page):
    start = (page - 1) * per_page
    end = start + per_page
    return warehouses[start:end]


def generate_warehouse_id(warehouse: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Å–∫–ª–∞–¥–∞.
    –£—Ä–µ–∑–∞–µ—Ç –¥–ª–∏–Ω—É –∏ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å callback_data.
    """
    return str(abs(hash(warehouse)) % (10 ** 8))  # –•—ç—à –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è –¥–æ 8 —Å–∏–º–≤–æ–ª–æ–≤


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å —Å–∫–ª–∞–¥—ã"
async def select_warehouses(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –≤—ã–±–æ—Ä —Å–∫–ª–∞–¥–æ–≤.")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ 1
    context.user_data['current_page'] = 1
    # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ show_warehouses
    await show_warehouses(update, context, context.user_data['current_page'])

async def show_warehouses(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = None):
    logger.info(f"–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} —Å–∫–ª–∞–¥–æ–≤.")
    
    if not page:
        callback_data = update.callback_query.data
        if callback_data.startswith("page_"):
            page = int(callback_data.split("_")[1])
        else:
            page = 1
    
    # Paginate warehouses
    total_pages = (len(all_warehouses) + per_page - 1) // per_page
    current_warehouses = paginate_warehouses(page)
    
    # Generate buttons for warehouses
    keyboard = [
        [
            InlineKeyboardButton(
                f"{warehouse} {'‚úÖ' if warehouse in monitored_warehouses else '‚ùå'}",
                callback_data=f"toggle_{generate_warehouse_id(warehouse)}"
            )
        ]
        for warehouse in current_warehouses
    ]
    
    # Navigation buttons in one row
    navigation_buttons = []
    if page > 1:
        navigation_buttons.append(InlineKeyboardButton("<", callback_data=f"page_{page - 1}"))
    if page < total_pages:
        navigation_buttons.append(InlineKeyboardButton(">", callback_data=f"page_{page + 1}"))
    if page > 3:
        navigation_buttons.insert(0, InlineKeyboardButton("<<<", callback_data="page_1"))
    if page < total_pages - 2:
        navigation_buttons.append(InlineKeyboardButton(">>>", callback_data=f"page_{total_pages}"))
    
    if navigation_buttons:
        keyboard.append(navigation_buttons)
    
    # Add "Finish selection" button
    keyboard.append([InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="finish_warehouses")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):",
        reply_markup=reply_markup
    )




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
async def page_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(query.data.split("_")[1])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['current_page'] = page
    # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Ñ—É–Ω–∫—Ü–∏—é show_warehouses
    await show_warehouses(update, context, page)



# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async def set_current_page(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int) -> None:
    context.user_data["current_page"] = page



async def toggle_warehouse(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∫–ª–∞–¥–∞.")
    query = update.callback_query
    await query.answer()

    warehouse_id = query.data.split("_")[1]
    warehouse_name = next((w for w in all_warehouses if generate_warehouse_id(w) == warehouse_id), None)

    if not warehouse_name:
        logger.error(f"–°–∫–ª–∞–¥ —Å ID {warehouse_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if warehouse_name in monitored_warehouses:
        monitored_warehouses.remove(warehouse_name)
        logger.info(f"–°–∫–ª–∞–¥ {warehouse_name} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
    else:
        monitored_warehouses.add(warehouse_name)
        logger.info(f"–°–∫–ª–∞–¥ {warehouse_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
    
    current_page = context.user_data.get("current_page", 1)
    await show_warehouses(update, context, current_page)




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤
async def finish_warehouses(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–±–æ—Ä —Å–∫–ª–∞–¥–æ–≤.")
    query = update.callback_query
    await query.answer()

    # –ü–µ—Ä–µ—Ö–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    await monitoring_settings(update, context)



# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
async def set_monitoring_coefficient(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç.")
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (0 = –±–µ—Å–ø–ª–∞—Ç–Ω–æ):")
    context.user_data["awaiting_coefficient"] = True

async def handle_coefficient_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get("awaiting_coefficient"):
        try:
            global max_coefficient
            max_coefficient = int(update.message.text)
            context.user_data["awaiting_coefficient"] = False
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {max_coefficient}.")
            await update.message.reply_text(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {max_coefficient}")
            await monitoring_settings(update, context)
        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")





def format_coefficients(data):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ —Å —Ç–∏–ø–æ–º –ø—Ä–∏–µ–º–∫–∏ (emoji).
    :param data: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π.
    :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫.
    """
    logger.info("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
    formatted = []
    for item in data:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫–ª–∞–¥, –¥–∞—Ç—É –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        warehouse = item.get("warehouseName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥")
        date = datetime.fromisoformat(item["date"]).strftime("%d-%m")
        coefficient = item.get("coefficient", -1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø—Ä–∏–µ–º–∫–∏ –∏ –µ–≥–æ emoji
        box_type = item.get("boxTypeName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
        box_emoji = acceptance_type_emojis.get(box_type, "‚ùì")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
        if coefficient == 0:
            status = "üü© FREE"
        elif coefficient <= 10:
            status = f"üü¶ {coefficient}"
        else:
            status = f"üüß {coefficient}"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        formatted.append(f"{box_emoji} [{status}] [{warehouse}] [{date}] ")
    logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(formatted)} –∑–∞–ø–∏—Å–µ–π.")
    return formatted




def filter_coefficients(data, interval, max_coeff):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–∫–ª–∞–¥–∞–º, –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º –∏ —Ç–∏–ø—É –ø—Ä–∏–µ–º–∫–∏.
    :param data: –î–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ API.
    :param interval: –î–∏–∞–ø–∞–∑–æ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–≤ –¥–Ω—è—Ö).
    :param max_coeff: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç.
    :return: –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.
    """
    logger.info("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–∫–ª–∞–¥–∞–º, –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º –∏ —Ç–∏–ø—É –ø—Ä–∏–µ–º–∫–∏.")
    logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–ª–∞–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {monitored_warehouses}")

    filtered = []
    end_date = datetime.now() + timedelta(days=interval)

    for item in data:
        warehouse = item.get("warehouseName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥")
        date = datetime.fromisoformat(item["date"][:10])
        coefficient = item.get("coefficient", None)
        box_type = item.get("boxTypeName", "")

        # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        if coefficient is None or coefficient < 0:
            continue

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–∫–ª–∞–¥–∞–º, —Ç–∏–ø–∞–º –ø—Ä–∏–µ–º–∫–∏, –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º
        if warehouse in monitored_warehouses and box_type in selected_types:
            if date <= end_date and coefficient <= max_coeff:
                filtered.append(item)

    logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(data)}.")
    return filtered





async def start_monitoring(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global is_monitoring, previous_data
    query = update.callback_query
    await query.answer()
    is_monitoring = True
    await query.edit_message_text("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")

    # –î–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
    log_interval = 40  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    last_log_time = datetime.now()

    while is_monitoring:
        logger.info("–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
        coefficients = await fetch_acceptance_coefficients()

        if coefficients:
            filtered = filter_coefficients(coefficients, monitoring_interval, max_coefficient)
            new_data = {f"{item['warehouseName']}-{item['date']}": item for item in filtered}
            new_items = [item for key, item in new_data.items() if key not in previous_data]

            if new_items:
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(new_items)} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
                await query.message.reply_text("\n".join(format_coefficients(new_items)))
            previous_data = new_data

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (datetime.now() - last_log_time).seconds >= log_interval:
            logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(coefficients)} –∑–∞–ø–∏—Å–µ–π.")
            last_log_time = datetime.now()

        await asyncio.sleep(10)  # –ü–µ—Ä–∏–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –∫ API



# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async def stop_monitoring(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global is_monitoring
    query = update.callback_query
    await query.answer()
    is_monitoring = False
    await query.edit_message_text("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_coefficient_input))
    application.add_handler(CallbackQueryHandler(monitoring_settings, pattern="^monitoring_settings$"))
    application.add_handler(CallbackQueryHandler(set_interval, pattern="^set_interval$"))
    application.add_handler(CallbackQueryHandler(set_monitoring_interval, pattern="^interval_"))
    application.add_handler(CallbackQueryHandler(set_monitoring_coefficient, pattern="^set_coefficient$"))
    application.add_handler(CallbackQueryHandler(start_monitoring, pattern="^start_monitoring$"))
    application.add_handler(CallbackQueryHandler(stop_monitoring, pattern="^stop_monitoring$"))
    application.add_handler(CallbackQueryHandler(monitoring_settings, pattern="^monitoring_settings$"))
    application.add_handler(CallbackQueryHandler(select_acceptance_types, pattern="^set_acceptance_types$"))
    application.add_handler(CallbackQueryHandler(toggle_acceptance_type, pattern="^toggle_type_"))
    application.add_handler(CallbackQueryHandler(finish_acceptance_types, pattern="^finish_acceptance_types$"))
    application.add_handler(CallbackQueryHandler(toggle_warehouse, pattern="^toggle_"))
    application.add_handler(CallbackQueryHandler(show_warehouses, pattern="^set_warehouses$"))
    application.add_handler(CallbackQueryHandler(page_navigation, pattern="^page_"))
    application.add_handler(CallbackQueryHandler(finish_warehouses, pattern="^finish_warehouses$"))
    



    application.run_polling()

if __name__ == "__main__":
    main()
